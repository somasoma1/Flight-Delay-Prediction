CREATE OR REPLACE VIEW clean_flights AS 
(
SELECT
    TO_TIMESTAMP(LEFT(flightdate, 10))::DATE AS flight_date 
  , LPAD(CRSDepTime::STRING, 4, '0') AS dept_string 
  , CONCAT(flight_date, 'T', LEFT(dept_string, 2), ':', RIGHT(dept_string, 2), ':00.000')::TIMESTAMP AS flight_departure_time 
  , tail_number
  , Origin 
  , Airline 
  , Dest 
  , Diverted
  , DepDelayMinutes -- only positive delay 
  , DepDelay -- positive and negative (positive delay is bad)
  , Distance 
  , Month AS month_date 
  , DayOfWeek  
  , Cancelled
  , COUNT(*) OVER (PARTITION BY origin, YEAR(flight_departure_time)) AS origin_yearly_flight_count 
  , COUNT(*) OVER (PARTITION BY origin ORDER BY flight_departure_time RANGE BETWEEN INTERVAL '1 DAYS' PRECEDING AND INTERVAL '1 DAYS' FOLLOWING) AS rolling_day_flight_count 
FROM
  flights.public.flights_data 
WHERE 
    YEAR(flight_departure_time) = 2018
)
;



SELECT 
    *
FROM 
    clean_flights
LIMIT 100
;


CREATE OR REPLACE VIEW timeseries_join AS 
(
SELECT 
    df1.flight_date
  , df1.flight_departure_time 
  , df1.Origin 
  , df1.Airline 
  , df1.Dest 
  , df1.Diverted
  , df1.DepDelayMinutes -- only positive delay 
  , df1.DepDelay -- positive and negative (positive delay is bad)
  , df1.Distance 
  , df1.month_date 
  , df1.DayOfWeek 
  , df1.Tail_Number 
  , df1.origin_yearly_flight_count
  , df1.rolling_day_flight_count


-- flights departing before flight we are considering 
  , df2.flight_date AS flight_date_pre
  , df2.flight_departure_time AS flight_departure_time_pre
  , df2.Origin AS Origin_pre
  , df2.Airline AS  Airline_pre
  , df2.Dest AS  Dest_pre
  , df2.Diverted AS Diverted_pre
  , df2.DepDelayMinutes AS  DepDelayMinutes_pre -- only positive delay 
  , df2.DepDelay AS DepDelay_pre -- positive and negative (positive delay is bad)
  , df2.Distance AS  Distance_pre
  , df2.month_date AS month_date_pre
  , df2.DayOfWeek AS  DayOfWeek_pre
  , df2.Tail_Number AS  Tail_Number_pre
  , df2.origin_yearly_flight_count AS origin_yearly_flight_count_pre
  , df2.rolling_day_flight_count AS rolling_day_flight_count_pre 


FROM 
    clean_flights AS df1 
LEFT JOIN 
    clean_flights AS df2 
    ON df1.Tail_Number = df2.Tail_Number
    AND df1.Airline = df2.Airline 
    AND DATEDIFF(MINUTE, df2.flight_departure_time, df1.flight_departure_time) < (60*24*2)
    AND df1.flight_departure_time > df2.flight_departure_time
WHERE 
    df1.Cancelled = FALSE 
QUALIFY 
    ROW_NUMBER() OVER (PARTITION BY df1.flight_departure_time, df1.Tail_Number, df1.Airline ORDER BY df2.flight_departure_time DESC) = 1
)
;


CREATE OR REPLACE TABLE flights_lag_flights AS 
(
SELECT 
    *
FROM 
    timeseries_join
)
;


SELECT 
    DepDelay_pre
  , Airline
  , Origin
  , Origin_pre
  , DayOfWeek
  , month_date
  , Distance_pre
  , depdelay
  , origin_yearly_flight_count_pre
  , origin_yearly_flight_count
FROM 
    flights_lag_flights
WHERE 
    depdelay IS NOT NULL 
   AND depdelay_pre IS NOT NULL
QUALIFY (ROW_NUMBER() OVER (PARTITION BY origin ORDER BY RANDOM(42)) 
        / COUNT(*) OVER (PARTITION BY origin))
        < 0.1
;

SELECT 
    DATE_TRUNC(DAY, flight_departure_time) AS flight_date_hour
  , AVG(depdelay) AS mean_depdelay 
  , AVG(depdelayminutes) AS mean_depdelay_positive
  , APPROX_PERCENTILE(depdelayminutes, 0.50) AS delay_50_percentile
  , APPROX_PERCENTILE(depdelayminutes, 0.60) AS delay_60_percentile
  , APPROX_PERCENTILE(depdelayminutes, 0.70) AS delay_70_percentile
  , APPROX_PERCENTILE(depdelayminutes, 0.80) AS delay_80_percentile
  , APPROX_PERCENTILE(depdelayminutes, 0.90) AS delay_90_percentile
  , APPROX_PERCENTILE(depdelayminutes, 0.95) AS delay_95_percentile
  , APPROX_PERCENTILE(depdelayminutes, 0.99) AS delay_99_percentile
  , COUNT(*) AS flight_count 
FROM 
    clean_flights
WHERE TRUE 
    --AND flight_date BETWEEN '2018-06-01' AND '2018-10-31'
GROUP BY ALL 
HAVING 
    flight_count > 50
ORDER BY 
    flight_date_hour
;


show tables;

select count(*) from all_date_and_data_modin;

SELECT 
    *
FROM 
    all_date_and_data_modin
;


SELECT 
    
FROM
  flights.public.flights_data 
WHERE 
    YEAR(flight_departure_time) = 2018


