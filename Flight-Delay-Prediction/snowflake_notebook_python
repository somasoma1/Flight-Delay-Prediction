{
 "metadata": {
  "kernelspec": {
   "display_name": "Streamlit Notebook",
   "name": "streamlit"
  },
  "lastEditStatus": {
   "notebookId": "orwidzu7te34riwz52of",
   "authorId": "8763028558459",
   "authorName": "JWESTMARK",
   "authorEmail": "jwestmark@gatech.edu",
   "sessionId": "a6900fc7-e758-4b6e-b20a-1ccbc3979e04",
   "lastEditTime": 1745090286228
  }
 },
 "nbformat_minor": 5,
 "nbformat": 4,
 "cells": [
  {
   "cell_type": "code",
   "id": "3775908f-ca36-4846-8f38-5adca39217f2",
   "metadata": {
    "language": "python",
    "name": "cell1"
   },
   "source": "# Import python packages\nimport sklearn as sk \nimport numpy as np \n\n\nimport modin.pandas as pd\nimport snowflake.snowpark.modin.plugin\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport xgboost as xgb \nimport shap \nimport catboost\n\nimport datetime\n\nimport pandas as pandas \n\n\n\n# We can also use Snowpark for our analyses!\nfrom snowflake.snowpark.context import get_active_session\nsession = get_active_session()\n",
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "id": "c248a79d-f146-4f91-914c-94ceea5d9c08",
   "metadata": {
    "language": "sql",
    "name": "flights_lag_flights_set",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "WITH \n    samples AS \n(\nSELECT \n    DepDelay_pre\n  , flight_date\n  , Airline\n  , Origin\n  , Origin_pre\n  , DayOfWeek\n  , month_date\n  , Distance_pre\n  , depdelay\n  , origin_yearly_flight_count_pre\n  , origin_yearly_flight_count\n  , rolling_day_flight_count_pre\n  , rolling_day_flight_count\nFROM \n    flights_lag_flights\nWHERE \n    depdelay IS NOT NULL \n   AND depdelay_pre IS NOT NULL\n--QUALIFY (ROW_NUMBER() OVER (PARTITION BY origin ORDER BY RANDOM(42)) \n --       / COUNT(*) OVER (PARTITION BY origin))\n --       < 0.5\n)\n\nSELECT \n    DepDelay_pre\n  , Airline\n  , flight_date\n  --, Origin\n  --, Origin_pre\n  , DayOfWeek\n  , month_date\n  , Distance_pre\n  , depdelay\n  , origin_yearly_flight_count_pre\n  , origin_yearly_flight_count\n  , rolling_day_flight_count_pre\n  , rolling_day_flight_count\nFROM \n    samples \nQUALIFY COUNT(*) OVER (PARTITION BY airline, origin) > 30",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "74dca31d-8f0e-4108-8471-be2eb8ce44e7",
   "metadata": {
    "language": "python",
    "name": "cell3",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "cat_features_col=[\n    \"AIRLINE\"\n  , \"DAYOFWEEK\"\n  , \"MONTH_DATE\"\n  , ]",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "276840e6-6166-4dfe-b047-a772966c6251",
   "metadata": {
    "language": "python",
    "name": "cell44",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "type(flights_lag_flights_set)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "77c7a94f-1c47-4e6b-9599-63e8a97c4727",
   "metadata": {
    "language": "python",
    "name": "cell5",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "flights_lag_flights_df = flights_lag_flights_set.to_pandas()\n#flights_lag_flights_df = pd.read_snowflake('''WITH \n#    samples AS \n#(\n#SELECT \n#    DepDelay_pre\n#  , flight_date\n#  , Airline\n#  , Origin\n#  , Origin_pre\n#  , DayOfWeek\n#  , month_date\n#  , Distance_pre\n#  , depdelay\n#  , origin_yearly_flight_count_pre\n#  , origin_yearly_flight_count\n#  , rolling_day_flight_count_pre\n#  , rolling_day_flight_count\n#FROM \n#    flights_lag_flights\n#WHERE \n#    depdelay IS NOT NULL \n#   AND depdelay_pre IS NOT NULL\n#--QUALIFY (ROW_NUMBER() OVER (PARTITION BY origin ORDER BY RANDOM(42)) \n# --       / COUNT(*) OVER (PARTITION BY origin))\n# --       < 0.5\n#)\n#\n#SELECT \n#    DepDelay_pre\n#  , Airline\n#  , flight_date\n#  --, Origin\n#  --, Origin_pre\n#  , DayOfWeek\n#  , month_date\n#  , Distance_pre\n#  , depdelay\n#  , origin_yearly_flight_count_pre\n#  , origin_yearly_flight_count\n#  , rolling_day_flight_count_pre\n#  , rolling_day_flight_count\n#FROM \n#    samples \n#QUALIFY COUNT(*) OVER (PARTITION BY airline, origin) > 30''')",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "dfe6df3e-804e-4dd5-942e-80c27c35e53f",
   "metadata": {
    "language": "python",
    "name": "cell13",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "for i in cat_features_col:\n    flights_lag_flights_df[i] = flights_lag_flights_df[i].astype(\"category\")",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "a8d2bde5-a269-4cf6-a4cd-c235bb064a71",
   "metadata": {
    "language": "python",
    "name": "cell14",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "flights_lag_flights_df.dtypes",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "0d06032f-f599-43d4-8f91-41448cc4f2a5",
   "metadata": {
    "language": "python",
    "name": "cell6",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "flights_lag_flights_df.head()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "63c606d5-7da3-410b-9805-ac94f9875f51",
   "metadata": {
    "language": "python",
    "name": "cell2",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "label_col= [\"DEPDELAY\"]",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "8ff5e136-7f08-4d12-84ea-e9fa558ef242",
   "metadata": {
    "language": "python",
    "name": "cell9",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "pd_x = flights_lag_flights_df[[\n    \"AIRLINE\"\n  , \"ROLLING_DAY_FLIGHT_COUNT\"\n  , \"ORIGIN_YEARLY_FLIGHT_COUNT\"\n  , \"DISTANCE_PRE\"\n  , \"DEPDELAY_PRE\"]]",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "58ff6736-f722-4dc3-9bbf-a9a9f04384b9",
   "metadata": {
    "language": "python",
    "name": "cell10",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "pd_y = flights_lag_flights_df[\"DEPDELAY\"]",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "544e6add-399d-4357-8206-60f70dbc2453",
   "metadata": {
    "language": "python",
    "name": "cell12",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "X_train, X_test, y_train, y_test = sk.model_selection.train_test_split(pd_x, pd_y, train_size = 0.7, random_state = 13)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "87bc1275-fd8c-4956-8bce-ca70f3abbb2b",
   "metadata": {
    "language": "python",
    "name": "cell8",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "reggy = xgb.XGBRegressor(enable_categorical = True)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "60304394-bc8a-4d36-9d03-e20202e45e10",
   "metadata": {
    "language": "python",
    "name": "cell11",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "reggy.fit(X_train, y_train)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "a0fdea43-de0d-423c-a6d1-1ad7b6664304",
   "metadata": {
    "language": "python",
    "name": "cell19",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "sk.metrics.explained_variance_score(y_test, reggy.predict(X_test))",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "f8a94bfb-1f40-4b34-8097-b66ff45f1d17",
   "metadata": {
    "language": "python",
    "name": "cell15"
   },
   "outputs": [],
   "source": "explainer = shap.Explainer(reggy)\nshap_values = explainer(X_train)\n",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "33611635-e11e-472f-a855-0aa4d190da31",
   "metadata": {
    "language": "python",
    "name": "cell16",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "shap.plots.beeswarm(shap_values)\n",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "6beb5779-98e0-4f82-b738-510d8443409e",
   "metadata": {
    "language": "python",
    "name": "cell4",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "catty = catboost.CatBoostRegressor(cat_features = cat_features_col)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "5a3f4b3d-c758-4bc6-88c6-13039246b704",
   "metadata": {
    "language": "python",
    "name": "cell17",
    "collapsed": true,
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "catty.fit(pd_x, pd_y)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "894e6d44-95c4-420c-b781-04abf53653eb",
   "metadata": {
    "language": "python",
    "name": "cell7"
   },
   "outputs": [],
   "source": "cat_explainer = shap.Explainer(catty)\ncattyshap_values = explainer(pd_x)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "18a259c8-70ea-4b4f-bb15-f5f8fc26436f",
   "metadata": {
    "language": "python",
    "name": "cell18"
   },
   "outputs": [],
   "source": "shap.plots.beeswarm(cattyshap_values)\n",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "1a3f6a11-8975-4166-9325-cff86ff8cdab",
   "metadata": {
    "language": "python",
    "name": "cell20"
   },
   "outputs": [],
   "source": "sk.metrics.explained_variance_score(pd_y, catty.predict(pd_x))",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "ae15e7b8-0d76-4e38-bec9-79eb2a89d410",
   "metadata": {
    "language": "python",
    "name": "cell23"
   },
   "outputs": [],
   "source": "y_train.head()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "dd11ea34-f9ea-4f01-af00-9985a371abb3",
   "metadata": {
    "language": "python",
    "name": "cell24"
   },
   "outputs": [],
   "source": "y_train_class = y_train.apply(lambda x: 1 if x > 20.0 else 0)\ny_test_class = y_test.apply(lambda x: 1 if x > 20.0 else 0)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "47bf962f-6bf2-4a5b-a471-3f1b1eb8a6ce",
   "metadata": {
    "language": "python",
    "name": "cell22",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "classy = xgb.XGBClassifier(enable_categorical = True, n_estimators = 10, max_depth = 5, max_leaves = 0)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "2e7f018b-41c7-4da2-a7e6-eff6bb6a19fb",
   "metadata": {
    "language": "python",
    "name": "cell21",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "classy.fit(X_train, y_train_class)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "48a68534-ff4a-4ce4-965a-9a49baaf82e7",
   "metadata": {
    "language": "python",
    "name": "cell25",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "sk.metrics.accuracy_score(y_train_class, classy.predict(X_train))",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "47bf67dd-e638-464e-a7a1-6b5a9d852b97",
   "metadata": {
    "language": "python",
    "name": "cell26",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "sk.metrics.accuracy_score(y_test_class, classy.predict(X_test))",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "4348bd52-2caa-4b0c-81da-6e3a61e028e4",
   "metadata": {
    "language": "python",
    "name": "cell27",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "print(sk.metrics.f1_score(y_train_class, classy.predict(X_train)))\nprint(sk.metrics.f1_score(y_test_class, classy.predict(X_test)))",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "5c82a471-0863-4ed4-9649-86ee52ff7ea0",
   "metadata": {
    "language": "python",
    "name": "cell49"
   },
   "outputs": [],
   "source": "\n\nclassy_explainer = shap.Explainer(classy)\nclassy_shap_values = classy_explainer(pd_x)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "4f77510b-fc27-4eb3-a4c9-fbf7275861b1",
   "metadata": {
    "language": "python",
    "name": "cell51"
   },
   "outputs": [],
   "source": "shap.plots.bar(classy_shap_values.abs.max(0))",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "0ae32351-c127-40e3-b99b-ba4e3a95da9d",
   "metadata": {
    "language": "python",
    "name": "cell50",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "shap.plots.beeswarm(classy_shap_values)\n",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "77dd18ca-d608-46ca-84da-45920887cd4b",
   "metadata": {
    "language": "python",
    "name": "cell38",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "flights_lag_flights_df",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "4bbd800d-5943-4ae9-a961-e75686d8e29c",
   "metadata": {
    "language": "python",
    "name": "cell39",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "datetime.datetime(2018,8,13).date()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "3ed33e0d-e08c-4643-8d4b-27ca19f87626",
   "metadata": {
    "language": "python",
    "name": "cell36",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "target_day_df = flights_lag_flights_df.loc[flights_lag_flights_df['FLIGHT_DATE'] == datetime.datetime(2018,8,13).date()]",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "6a26b521-1693-4f9e-b266-709d55e34ce9",
   "metadata": {
    "language": "python",
    "name": "cell35",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "target_day_pred = classy.predict(target_day_df[[\n    \"AIRLINE\"\n  , \"ROLLING_DAY_FLIGHT_COUNT\"\n  , \"ORIGIN_YEARLY_FLIGHT_COUNT\"\n  , \"DISTANCE_PRE\"\n  , \"DEPDELAY_PRE\"]])",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "36ee673a-39c3-4b0a-84bb-0e43559c2936",
   "metadata": {
    "language": "python",
    "name": "cell40",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "target_day_pred.mean()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "f5bd22f4-ba99-488e-bc3f-4a37f9498017",
   "metadata": {
    "language": "python",
    "name": "cell41",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "all_date_pred = pandas.DataFrame(classy.predict(flights_lag_flights_df[[\n    \"AIRLINE\"\n  , \"ROLLING_DAY_FLIGHT_COUNT\"\n  , \"ORIGIN_YEARLY_FLIGHT_COUNT\"\n  , \"DISTANCE_PRE\"\n  , \"DEPDELAY_PRE\"]]))\n\nall_date_pred.columns = ['PRED']",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "584e3d39-f7b4-4a5e-a4aa-0d072e35523a",
   "metadata": {
    "language": "python",
    "name": "cell45",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "all_date_pred",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "09007bf3-76e4-47b1-96e7-8ac452005876",
   "metadata": {
    "language": "python",
    "name": "cell43",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "all_date_and_data = pandas.concat([flights_lag_flights_df, all_date_pred], axis = 1)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "c9f12f72-1a66-4441-b3bf-f90f63d4c3cb",
   "metadata": {
    "language": "python",
    "name": "cell46",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "all_date_and_data_modin = pd.DataFrame(all_date_and_data, dtype = 'str')",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "ba962ef0-e19c-4674-89e3-3bbd4a41ebaa",
   "metadata": {
    "language": "python",
    "name": "cell48"
   },
   "outputs": [],
   "source": "all_date_and_data_modin.head()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "9517a47d-f1bc-4fa3-8862-2e5b7b00aa19",
   "metadata": {
    "language": "python",
    "name": "cell47",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "all_date_and_data_modin.to_snowflake(\"all_date_and_data_modin\", if_exists = 'replace', index = False)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "dc8ebd62-a616-4bb4-aa22-643aa29eb7fa",
   "metadata": {
    "language": "python",
    "name": "cell37",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "all_date_and_data[['FLIGHT_DATE', 'PRED']].groupby('FLIGHT_DATE').mean()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "70e6b419-7b75-41f2-a4be-002c77e470d0",
   "metadata": {
    "language": "python",
    "name": "cell42",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "sns.lineplot(all_date_and_data[['FLIGHT_DATE', 'PRED']].groupby('FLIGHT_DATE').mean())\n\nplt.title(\"% of Flights Delayed (Predicted) by Day\")",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "bec83dbb-f76b-4426-bf6a-9f5fb196ad4a",
   "metadata": {
    "language": "python",
    "name": "cell30",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "classy_cv = xgb.XGBClassifier(enable_categorical = True)\n\ngriddy = sk.model_selection.GridSearchCV(\n              estimator =  classy_cv\n        , param_grid = {'n_estimators': [1, 5, 10],\n                    'max_depth': [5, 10, 20],\n                    'max_leaves': [0, 10, 50] \n                   }\n        , scoring = 'f1' \n)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "caea1e8d-be32-4e13-8e90-cc841be3c90a",
   "metadata": {
    "language": "python",
    "name": "cell31",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "griddy.fit(X_train, y_train_class)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "52730637-830f-4cb2-b473-a93d78d7b581",
   "metadata": {
    "language": "python",
    "name": "cell32",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "griddy.best_params_",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "ffa7484f-7ce1-4c69-9433-bf76be7c0c68",
   "metadata": {
    "language": "python",
    "name": "cell28",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "confuse = sk.metrics.ConfusionMatrixDisplay(sk.metrics.confusion_matrix(y_test_class, classy.predict(X_test)))\n\nconfuse.plot()",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "c1556dff-4110-4bf6-823d-3d609d863789",
   "metadata": {
    "language": "python",
    "name": "cell29",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "class_explainer = shap.Explainer(classy)\nclassy_shap_values = class_explainer(X_train)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "5e3bd858-2289-4b6b-b286-39233f492e6c",
   "metadata": {
    "language": "python",
    "name": "cell33",
    "codeCollapsed": false
   },
   "outputs": [],
   "source": "shap.plots.beeswarm(classy_shap_values)",
   "execution_count": null
  },
  {
   "cell_type": "code",
   "id": "c4b24d74-93d6-40e6-b21a-127149656a85",
   "metadata": {
    "language": "python",
    "name": "cell34"
   },
   "outputs": [],
   "source": "",
   "execution_count": null
  }
 ]
}
